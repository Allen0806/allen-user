<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.allen.user.dao.AuthorityDAO">
	<insert id="save" parameterType="AuAuthorityDO" useGeneratedKeys="true" keyProperty="id" >
		insert into au_authority(authority_name, authority_note, create_time)
			values(#{authorityName}, #{authorityNote}, #{createTime})
	</insert>
	<!-- 根据主键ID更新，trim使用示例 -->
	<update id="update" parameterType="AuAuthorityDO">
		update au_authority
		<trim prefix="set" suffixOverrides=",">
			<if test="authorityName != null" >authority_name=#{authorityName},</if>
			<if test="authority_note != null">authority_note=#{authorityNote}</if>
		</trim>
		where id = #{id}
	</update>
	<!-- 根据主键ID删除 -->
	<delete id="delete" parameterType="long">
		delete from au_authority where id = #{id}
	</delete>
	<insert id="saveRoleAuthority" useGeneratedKeys="true" keyProperty="id">
		insert into au_role_authority(role_id, authority_id, is_valid, create_time) values
		<foreach collection="list" item="item" separator=",">
			(#{item.roleId}, #{item.authorityId}, #{item.valid}, #{item.createTime})
		</foreach>
	</insert>
	<delete id="deleteRoleAuthority">
		<if test="roleId != null or authorityId != null">
			delete from au_role_authority
			<where>
				<if test="roleId != null">
					role_id = #{roleId}
				</if>
				<if test="authorityId != null">
					and authority_id = #{authorityId}
				</if>
			</where>
		</if>
	</delete>
	<!-- 通用查询语句块 -->
	<sql id="authorityColumns">
		id, role_id, authority_id, is_valid, create_time
	</sql>
	<resultMap id="authorityResultMap" type="AuAuthorityDO">
		<id property="id" column="id" />
		<result property="authorityName" column="authority_name" />
		<result property="authorityNote" column="authority_note"/>
		
		<result property="createTime" column="create_time"/>
	</resultMap>
	<select id="get" parameterType="long" resultMap="authorityResultMap">
		select
		<include refid="authorityColumns" />
		from au_authority
		where id = #{id}
	</select>
	<select id="getByAuthorityName" parameterType="string" resultType="AuAuthorityDO">
		select
		<include refid="authorityColumns" />
		from au_authority
		where authority_name = #{authorityName}
	</select>
	<resultMap id="roleAuthorityResultMap" type="AuRoleAuthorityDO">
		<id property="id" column="id" />
		<result property="roleId" column="role_id" />
		<result property="authorityId" column="authority_id"/>
		<result property="valid" column="is_valid" javaType="boolean" jdbcType="TINYINT"/>
		<result property="createTime" column="create_time"/>
		<association property="authority" column="authority_id" resultMap="authorityResultMap" columnPrefix="au_"/>
	</resultMap>
	<select id="listRoleAuthority" resultMap="roleAuthorityResultMap">
		<if test="roleId != null or authorityId != null">
			select 
				a.id id,
				a.role_id, role_id,
				a.authority_id authority_id,
				a.is_valid is_valid,
				a.create_time create_time,
				b.id au_id,
				b.authority_name au_authority_name,
				b.authority_note au_authority_note,
				b.create_time, au_create_time
			from au_role_authority a left join au_authority b on b.id = a.authority_id
			<where>
				<if test="roleId != null">
					a.role_id = #{roleId}
				</if>
				<if test="authorityId != null">
					and a.authority_id = #{authorityId}
				</if>
			</where>
		</if>
	</select>
</mapper>