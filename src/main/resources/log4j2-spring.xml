<?xml version="1.0" encoding="UTF-8"?>
<!-- status表示log4j2自身的输出日志级别，monitorInterval表示过多少秒后重新读取配置文件 -->
<configuration status="WARN" monitorInterval="3000">
	<properties>
		<property name="app">allen-user</property>
        <property name="log.home">/Users/allen/Develop/logs/${app}</property>
        <property name="file.name">${app}</property>
        <property name="log.pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{X-B3-TraceId},%X{X-B3-SpanId},%X{X-B3-ParentSpanId},%X{X-Span-Export}] [%t] %-5level %l - %msg%xEx%n</property>
        <property name="log.arms.pattern">%d{yyyy-MM-dd HH:mm:ss.SSS}|[%t]|%msg%xEx%n</property>
    </properties>
	<!-- 先定义所有的appender -->
	<appenders>
		<!-- 这个输出控制台的配置 -->
		<Console name="Console" target="SYSTEM_OUT">
			<!-- 控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<ThresholdFilter level="DEBUG" onMatch="ACCEPT"	onMismatch="DENY" />
			<!-- 输出日志的格式 -->
			<PatternLayout pattern="${log.pattern}" />
		</Console>
		
		<!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="DebugLog" fileName="${log.home}/${file.name}-debug.log"
			filePattern="${log.home}/$${date:yyyy-MM}/${file.name}-debug-%d{yyyy-MM-dd}-%i.log">
			<!-- 只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<PatternLayout pattern="${log.pattern}" />
			<Filters>
				<ThresholdFilter level="DEBUG"/>
            	<ThresholdFilter level="INFO" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
			<Policies>
				<!-- 按大小产生文件 -->
                <SizeBasedTriggeringPolicy size="500 MB" />
                <!-- 按时间产生文件 -->
                <TimeBasedTriggeringPolicy />  
            </Policies> 
            <DefaultRolloverStrategy max="30" />
		</RollingFile>

		<!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="InfoLog" fileName="${log.home}/${file.name}-info.log"
			filePattern="${log.home}/$${date:yyyy-MM}/${file.name}-info-%d{yyyy-MM-dd}-%i.log">
			<!-- 只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<PatternLayout pattern="${log.pattern}" />
			<Filters>
				<ThresholdFilter level="INFO" onMatch="ACCEPT"	onMismatch="DENY" />
            </Filters>
			<Policies>  
                <SizeBasedTriggeringPolicy size="500 MB" />
                <TimeBasedTriggeringPolicy />
            </Policies> 
            <DefaultRolloverStrategy max="30" />
		</RollingFile>
		
		<!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="WarnLog" fileName="${log.home}/${file.name}-warn.log"
			filePattern="${log.home}/$${date:yyyy-MM}/${file.name}-warn-%d{yyyy-MM-dd}-%i.log">
			<!-- 只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<PatternLayout pattern="${log.pattern}" />
			<Filters>
				<ThresholdFilter level="WARN" onMatch="ACCEPT"	onMismatch="DENY" />
            </Filters>
			<Policies>  
                <SizeBasedTriggeringPolicy size="500 MB" />
                <TimeBasedTriggeringPolicy />
            </Policies> 
            <DefaultRolloverStrategy max="30" />
		</RollingFile>
		
		<!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="ErrorLog" fileName="${log.home}/${file.name}-error.log"
			filePattern="${log.home}/$${date:yyyy-MM}/${file.name}-error-%d{yyyy-MM-dd}-%i.log">
			<PatternLayout pattern="${log.pattern}" />
			<Filters>
				<!-- 只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
                <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
			<Policies>  
                <SizeBasedTriggeringPolicy size="500 MB" />
                <TimeBasedTriggeringPolicy />
            </Policies> 
            <DefaultRolloverStrategy max="30" />
		</RollingFile>
		
		<!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="DruidSqlLog" fileName="${log.home}/${file.name}-druidsql.log"
			filePattern="${log.home}/$${date:yyyy-MM}/${file.name}-druidsql-%d{yyyy-MM-dd}-%i.log">
			<PatternLayout pattern="${log.pattern}" />
			<Policies>  
                <SizeBasedTriggeringPolicy size="500 MB" />
                <TimeBasedTriggeringPolicy />
            </Policies> 
            <DefaultRolloverStrategy max="30" />
		</RollingFile>
	</appenders>

	<!-- 然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
	<loggers>
		<!--log4j2 自带过滤日志-->
		<Logger name="org.apache.catalina.startup.DigesterFactory" level="ERROR" />
        <Logger name="org.apache.catalina.util.LifecycleBase" level="ERROR" />
        <Logger name="org.apache.coyote.http11.Http11NioProtocol" level="WARN" />
        <Logger name="org.apache.sshd.common.util.SecurityUtils" level="WARN"/>
        <Logger name="org.apache.tomcat.util.net.NioSelectorPool" level="WARN" />
        <Logger name="org.apache.kafka" level="WARN" />
        <Logger name="com.netflix.eureka" level="WARN" />
        <Logger name="com.ctrip.framework.apollo" level="WARN" />
        <Logger name="org.crsh.plugin" level="WARN" />
        <Logger name="org.crsh.ssh" level="WARN"/>
        <Logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="ERROR" />
        <Logger name="org.hibernate.validator.internal.util.Version" level="WARN" />
        <Logger name="org.springframework.boot.actuate.autoconfigure.CrshAutoConfiguration" level="WARN"/>
        <Logger name="org.springframework.boot.actuate.endpoint.jmx" level="WARN"/>
        <Logger name="org.thymeleaf" level="warn"/>
        <Logger name="org.springframework" level="WARN" />
        <Logger name="org.mybatis" level="WARN" />
        <!--记录druid-sql的记录-->
        <Logger name="druid.sql.Statement" level="DEBUG" additivity="false">
            <AppenderRef ref="DruidSqlLog"/>
        </Logger>
        
		<Root level="DEBUG" includeLocation="true">
			<AppenderRef ref="DebugLog" />
			<AppenderRef ref="InfoLog" />
			<AppenderRef ref="WarnLog" />
			<AppenderRef ref="ErrorLog" />
			<AppenderRef ref="Console" />
		</Root>
	</loggers>
</configuration>